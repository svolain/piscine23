# **************************************************************************** #
#                                                                              #
#                                                         :::      ::::::::    #
#    fourandfive                                        :+:      :+:    :+:    #
#                                                     +:+ +:+         +:+      #
#    By: vsavolai <vsavolai@student.hive.fi>        +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: 2023/07/17 18:31:15 by vsavolai          #+#    #+#              #
#    Updated: 2023/07/18 09:55:46 by vsavolai         ###   ########.fr        #
#                                                                              #
# **************************************************************************** #


#include "ft_stock_str.h"
#include <unistd.h>
#include <stdlib.h>
#include<stdio.h>

void    ft_putstr(char *str)
{
    int i;

    i = 0;
    while (str[i] != '\0')
    {
        write(1, &str[i], 1);
        i++;
    }
}

int ft_strlen(char *str)
{
    int i;

    i = 0;
    while (str[i] != '\0')
    {
        ++i;
    }
    return (i);
}

char    *ft_strcpy(char *dest, char *src)
{
    int i;

    i = 0;
    while (src[i] != '\0')
    {
        dest[i] = src[i];
        i++;
    }
    dest[i] = '\0';
    return (dest);
}

char    *ft_strdup(char *src)
{
    char    *dup;
    int     strlen;
    strlen = ft_strlen(src);
    dup = (char *)malloc(sizeof(char) * (strlen + 1));
    if (dup == '\0')
        return (0);
    ft_strcpy(dup, src);
    return (dup);
}

struct s_stock_str *ft_strs_to_tab(int ac, char **av)
{
    int i;
    t_stock_str *ptr;

    i = 0;
    ptr = malloc((ac + 1) * sizeof(t_stock_str));
    if (ptr == 0)
        return (0);
    while (i < ac)
    {
        ptr[i].size = ft_strlen(av[i]);
        ptr[i].str = av[i];
        ptr[i].copy = ft_strdup(av[i]);
        if (ptr[i].copy == 0)
        {
            free(ptr[i].copy);
            return(0);
        }
        i++;
    }
    ptr[i] = (t_stock_str){0, 0, 0};
    return (ptr);
}

int check(int nb)
  {
      if (nb == -2147483648)
      {
          write(1, "-2147483648", 11);
          return (1);
      }
      if (nb == 0)
      {
truct s_stock_str *ft_strs_to_tab(int ac, char **av)
{
    int i;          write(1, "0", 1);
          return (1);
      }
      return (0);
  }

 void    ft_putnbr(int nb)
  {
      char    c;

      if (check(nb))
          return ;
      if (nb < 0)
      {
          write(1, "-", 1);
          nb *= -1;
      }
      if (nb / 10 != 0)
          ft_putnbr(nb / 10);
      c = (nb % 10) + '0';
      write(1, &c, 1);
  }

void ft_show_tab(struct s_stock_str *par)
{
    int i;
 
    i = 1;
    parsize = sizeof(*par);
    while (par[i].str != '\0')
    {
        ft_putstr(par[i].str);
        write(1, "\n", 1);
        ft_putnbr(par[i].size);
        write(1, "\n", 1);
        ft_putstr(par[i].copy);
        write(1, "\n", 1);
        i+
}+;
    }
}
/*
int main(int ac, char **av)
{
//  char **av;
//  int ac;

//  ac = 3;
//  av = (char **)malloc(sizeof(char *) * ac);
    if (av == 0)
        return (0);
//  av[0] = "a.out";
//  av[1] = "abc";
//  av[2] = "def";
//  av[3] = "ghi";
    ft_show_tab(ft_strs_to_tab(ac, av));
    return (0);
}*/


int main(int a, char **b)
{
    int         j = 0;
    t_stock_str *s;
  int num = 3;
    s = ft_strs_to_tab(a, b);
    while (j < 5)
  {
    if (num == s[j].size)
      printf("%s\n", s[j].str);
    j++;
  }
  j = 0;
    while (j < a + 1)
    {
        printf("%d\n", j);
        printf("\t| original : $%s$ @ %p\n", s[j].str, s[j].str);
        printf("\t|  copied : $%s$ @ %p\n", s[j].copy, s[j].copy);
        printf("\t|   size : %d\n", s[j].size);
        j++;
    }
}
